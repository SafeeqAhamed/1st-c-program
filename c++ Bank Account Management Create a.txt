1.	Bank Account Management Create a BankAccount class that simulates a bank account. The class should have methods to deposit, withdraw, and check the account balance. Implement the necessary constructors and accessors. Write a program to demonstrate the functionality of the BankAccount class.
Test cases:
Custom Test Cases:
i.	 Test depositing and withdrawing funds from the account.
•	Deposit: $1000, Withdraw: $500
•	Expected Account Balance: $500
ii.	 Test withdrawing more funds than the account balance.
•	Deposit: $1000, Withdraw: $1500
•	Expected Result: Error message indicating insufficient funds.

CODE:
#include <iostream>
using namespace std;

class student {
private:
    int deposit;
    int withdraw;
    static int balance;

public:
    // Constructor
    student() {
        deposit = 0;
        withdraw = 0;
    }

    // Destructor
    ~student() {
        // Optional: Perform any necessary cleanup here
    }

    void getset() {
        cout << "Enter deposit amount: ";
        cin >> deposit;
        cout << "Enter withdraw amount: ";
        cin >> withdraw;
        balance += deposit - withdraw;
    }

    void showme() {          
        cout << "Deposit: " << deposit << endl;
        cout << "Withdraw: " << withdraw << endl;

        if (balance > 0) {
            cout << "Balance: " << balance << endl;
        } else {
            cout << "Error message indicating insufficient funds." << endl;
        }
    }
};

int student::balance = 0;

int main() {
    student a;
    student b;
    a.getset();
    a.showme();
    b.getset();
    b.showme();

    return 0;
}



2.)2.	Question: Create a class called Stack that represents a stack data structure. It should have methods push(), pop(), and isEmpty() to add elements, remove elements, and check if the stack is empty, respectively. Implement the stack using an array. Write a program that demonstrates the functionality of the Stack class by performing push and pop operations.                         

Test cases:

Stack Operations:
1. Push
2. Pop
3. Exit
Enter your choice: 1
Enter element to push: 10
Pushed element: 10

Stack Operations:
1. Push
2. Pop
3. Exit
Enter your choice: 1
Enter element to push: 20
Pushed element: 20

Stack Operations:
1. Push
2. Pop
3. Exit
Enter your choice: 2
Popped element: 20

Stack Operations:
1. Push
2. Pop
3. Exit
Enter your choice: 2
Popped element: 10

Stack Operations:
1. Push
2. Pop
3. Exit
Enter your choice: 2
Stack is empty. Cannot pop element.


#include <iostream>
using namespace std;

class Stack {
private:
    int stk[100];
    int index;

public:
    Stack() {
        index = 0; // initialize index to 0
        cout << "Stack created." << endl;
    }

    ~Stack() {
        cout << "Stack destroyed." << endl;
    }

    void push() {
        int n;
        cout << "Enter element to push: ";
        cin >> n;
        stk[index++] = n;
        cout << "Pushed element is: " << n << endl;
    }

    void pop() {
        if (index > 0) {
            index = index - 1;
            cout << "Popped element is: " << stk[index] << endl;
        } 
    }

    bool isempty() {
        return (index == 0);
    }
};

int main() {
    int x = 0;
    Stack s1;

    while (x != 3) {
        cout << "Stack Operations:\n1. Push\n2. Pop\n3. Exit\nEnter your choice: ";
        cin >> x;

        if (x == 1) {
            s1.push();
        } else if (x == 2) {
            if (s1.isempty()) {
                cout << "Stack is empty. Cannot pop element." << endl;
            } else {
                s1.pop();
            }
        }
    }

    return 0;
}


